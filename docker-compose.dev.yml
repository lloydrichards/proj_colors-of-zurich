version: "3.8"

services:
  next-app:
    container_name: next-app
    build:
      context: .
      dockerfile: ./.docker/dev.DockerFile
    env_file:
      - .env
    environment:
      HOSTNAME: ${HOSTNAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_DB_PORT: ${POSTGRES_DB_PORT}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${HOSTNAME}:${POSTGRES_DB_PORT}/${POSTGRES_DB_NAME}?schema=public
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./:/app/next-app
    restart: always
    ports:
      - 3000:3000

  storybook:
    container_name: storybook
    build:
      context: .
      dockerfile: ./.docker/story.DockerFile
    volumes:
      - ./src:/app/next-app/src
    ports:
      - 6006:6006

  postgres:
    image: postgres:15-alpine
    container_name: postgres_app
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - ${POSTGRES_DB_PORT}:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "next_app"]
      interval: 5s
      timeout: 10s
      retries: 5

volumes:
  postgres:
